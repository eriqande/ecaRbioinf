[{"path":[]},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric C. Anderson. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anderson EC (2022). ecaRbioinf: R Functions Bioinformatic Tasks. R package version 0.1.0.999.","code":"@Manual{,   title = {ecaRbioinf: A Few R Functions For Bioinformatic Tasks},   author = {Eric C. Anderson},   year = {2022},   note = {R package version 0.1.0.999}, }"},{"path":"/index.html","id":"ecarbioinf--a-few-functions-to-do-bioinformatic-tasks","dir":"","previous_headings":"","what":"A Few R Functions For Bioinformatic Tasks","title":"A Few R Functions For Bioinformatic Tasks","text":"August 18 2020  R package performing small bioinformatic tasks likely going . cases probably Unix tools things, couldn’t find , , cases, surprised quickly efficiently R handle things. also likely BioConductor solutions many . can install like : Online help files can found : https://eriqande.github.io/ecaRbioinf Sorry! vignettes, least help files somewhat put together.","code":"# install.packages(\"remotes\")  #  <-- Do this if you don't have the 'remotes' package remotes::install_github(\"eriqande/ecaRbioinf\")"},{"path":"/reference/add_substitutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add dna differences from fasta files to phased tidy vcfR data frame — add_substitutions","title":"Add dna differences from fasta files to phased tidy vcfR data frame — add_substitutions","text":"situation might use : phased sequence data chinook salmon, also ancestral state coho sites.  now want add sites differences coho Chinook, although Chinook variants sites.","code":""},{"path":"/reference/add_substitutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add dna differences from fasta files to phased tidy vcfR data frame — add_substitutions","text":"","code":"add_substitutions(HT, Anc, ref, anc)"},{"path":"/reference/add_substitutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add dna differences from fasta files to phased tidy vcfR data frame — add_substitutions","text":"HT tidy data haplotypes, like coming vcf_haplos2tidy(). Anc name ancestral sequence HT ref path fasta (can gzipped) contains \"reference\" sequence. anc path fasta (can gzipped) represents homologous sequence, often \"ancstral\" sequence aligned exact positions reference sequence.","code":""},{"path":"/reference/add_substitutions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add dna differences from fasta files to phased tidy vcfR data frame — add_substitutions","text":"Note single CHROM allowed assumed HT ref anc.  checking done moment.","code":""},{"path":"/reference/add_substitutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add dna differences from fasta files to phased tidy vcfR data frame — add_substitutions","text":"","code":"# get the VCF first V <- system.file(package = \"ecaRbioinf\", \"extdata\", \"greb1l-imp-phased-with-anc.vcf.gz\") haps <- vcf_haplos2tidy(V, Anc = \"Coho\") #> Scanning file to determine attributes. #> File attributes: #>   meta lines: 15 #>   header_line: 16 #>   variant count: 5732 #>   column count: 137 #>  Meta line 15 read in. #> All meta lines processed. #> gt matrix initialized. #> Character matrix gt created. #>   Character matrix gt rows: 5732 #>   Character matrix gt cols: 137 #>   skip: 0 #>   nrows: 5732 #>   row_num: 0 #>  Processed variant 1000 Processed variant 2000 Processed variant 3000 Processed variant 4000 Processed variant 5000 Processed variant: 5732 #> All variants processed #> Extracting gt element GT #> Extracting gt element DS #> Extracting gt element GP  # whittle it down to the RoSA region haps$fix <- haps$fix %>% dplyr::filter(POS > 12.05e6, POS < 12.4e6) haps$tidy <- haps$tidy %>% dplyr::filter(POS > 12.05e6, POS < 12.4e6)  # get the fasta ref <- system.file(package = \"ecaRbioinf\", \"extdata\", \"NC_037124.1_fragment_chinook.fna.gz\") anc <- system.file(package = \"ecaRbioinf\", \"extdata\", \"NC_037124.1_fragment_coho.fna.gz\")  # add the substitutions  combo <- add_substitutions(haps, \"Coho\", ref, anc) #> Sequence starting position: 9661479 #> Percentage substitutions: 0.0214500764427991"},{"path":"/reference/expand_anno_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function specific to haplo_raster_plot. — expand_anno_cols","title":"helper function specific to haplo_raster_plot. — expand_anno_cols","text":"expands annotation columns raster can plotted another layer","code":""},{"path":"/reference/expand_anno_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function specific to haplo_raster_plot. — expand_anno_cols","text":"","code":"expand_anno_cols(A, n)"},{"path":"/reference/expand_anno_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function specific to haplo_raster_plot. — expand_anno_cols","text":"tibble hnames, column, value, width (proportion main raster area want width column ). n width main raster area.  Basically number SNPs shown.","code":""},{"path":"/reference/expand_anno_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Find x,y of the midpoint of each annotation column, and return with the names to print.\nhelper function specific to haplo_raster_plot. — expand_anno_rows","title":"Find x,y of the midpoint of each annotation column, and return with the names to print.\nhelper function specific to haplo_raster_plot. — expand_anno_rows","text":"expands annotation rows raster can plotted another layer","code":""},{"path":"/reference/expand_anno_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find x,y of the midpoint of each annotation column, and return with the names to print.\nhelper function specific to haplo_raster_plot. — expand_anno_rows","text":"","code":"expand_anno_rows(A, n, start_shift = 0)"},{"path":"/reference/expand_anno_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find x,y of the midpoint of each annotation column, and return with the names to print.\nhelper function specific to haplo_raster_plot. — expand_anno_rows","text":"tibble POS, row, value, height (proportion main raster-area height want height row ). n height main raster area.  Basically number hnames shown. start_shift many rows want start guys?","code":""},{"path":"/reference/expand_sam_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"expand SAM flag into 12 columns — expand_sam_flag","title":"expand SAM flag into 12 columns — expand_sam_flag","text":"expand SAM flag 12 columns","code":""},{"path":"/reference/expand_sam_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expand SAM flag into 12 columns — expand_sam_flag","text":"","code":"expand_sam_flag(D, column)"},{"path":"/reference/expand_sam_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expand SAM flag into 12 columns — expand_sam_flag","text":"D tibble SAM rows column name column holding SAM flag","code":""},{"path":"/reference/fasta_dna_diffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and return the substitutions between two parallel fasta files (each with only a single sequence) — fasta_dna_diffs","title":"Find and return the substitutions between two parallel fasta files (each with only a single sequence) — fasta_dna_diffs","text":"case like : fasta file one chromosome species, example Chinook salmon.  also another fasta file holds bases coho salmon homologous positions Chinook salmon.  (words, coho fasta exactly length Chinook fasta.)  want find positions different base Chinook coho, want return nice data frame.","code":""},{"path":"/reference/fasta_dna_diffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and return the substitutions between two parallel fasta files (each with only a single sequence) — fasta_dna_diffs","text":"","code":"fasta_dna_diffs(ref, anc, OutputBigTable = FALSE)"},{"path":"/reference/fasta_dna_diffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and return the substitutions between two parallel fasta files (each with only a single sequence) — fasta_dna_diffs","text":"ref path fasta (can gzipped) contains \"reference\" sequence. anc path fasta (can gzipped) represents homologous sequence, often \"ancstral\" sequence aligned exact positions reference sequence. OutputBigTable TRUE, return list, element \"ret\" standard return value, element \"raw_tib\" full tibble full sequences.","code":""},{"path":"/reference/fasta_dna_diffs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find and return the substitutions between two parallel fasta files (each with only a single sequence) — fasta_dna_diffs","text":"Note upper lower case letters treated .  , example ref = anc = counted substitution.  Output always uppercase. Additionally, either sequence N, counted difference substitution.  fact, bases ,C,G, T discarded recorded difference.  (words, just going substitutions ). Note, chromosome name (CHROM output) taken reference fasta (ref). Note, sequence name ref form >chrom:p1-p2, p1 p2 integers, positions reported differences shifted start p1. surprising operations done quickly easily R.","code":""},{"path":"/reference/fasta_dna_diffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and return the substitutions between two parallel fasta files (each with only a single sequence) — fasta_dna_diffs","text":"","code":"ref <- system.file(package = \"ecaRbioinf\", \"extdata\", \"NC_037124.1_fragment_chinook.fna.gz\") anc <- system.file(package = \"ecaRbioinf\", \"extdata\", \"NC_037124.1_fragment_coho.fna.gz\") fdd <- fasta_dna_diffs(ref, anc) #> Sequence starting position: 9661479 #> Percentage substitutions: 0.0214500764427991"},{"path":"/reference/genome_coords_from_query_and_cigar.html","id":null,"dir":"Reference","previous_headings":"","what":"match locations on a short query sequence to the genomic coordinates of a reference — genome_coords_from_query_and_cigar","title":"match locations on a short query sequence to the genomic coordinates of a reference — genome_coords_from_query_and_cigar","text":"particularly useful mapped early version genome, designed assays SNPs positions X, Y, Z , say, 500 bp fragment.  now want know coordinates X, Y, Z relative updated version genome.  , map 500 bp updated version genome, find long complicated CIGAR string links two.  parses CIGAR string give genomic coordinates X, Y, Z relative new, updated reference genome.","code":""},{"path":"/reference/genome_coords_from_query_and_cigar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match locations on a short query sequence to the genomic coordinates of a reference — genome_coords_from_query_and_cigar","text":"","code":"genome_coords_from_query_and_cigar(cigar, start, rel_pos = NULL,   strand = NULL, query_length = NULL)"},{"path":"/reference/genome_coords_from_query_and_cigar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match locations on a short query sequence to the genomic coordinates of a reference — genome_coords_from_query_and_cigar","text":"cigar cigar string start base-1 left end mapping position query reference rel_pos base-1 positions (1 start query sequence) whose corresponding positions reference desired.  NULL, positions query returned.  important note position relative original query sequence, upon hard-clipping done, reason, hard-clipping consumes original query sequence. strand \"+\" \"-\".  \"+\" indicates alignment forward strand means rel_pos query correct stands.  strand \"-\" function takes care computing new relative position starts counting end query strand.  query length required. query_length length original query sequence.","code":""},{"path":"/reference/genome_coords_from_query_and_cigar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"match locations on a short query sequence to the genomic coordinates of a reference — genome_coords_from_query_and_cigar","text":"definitely written speed.  hard write something super fast lines C++, wanted something easy look . part, can done using cumulative sums whether different CIGAR operator consumes query reference. looks like similar thing can done BioConductor package function, GenomicAlignments::mapToAlignments, find stuff pretty opaque (many different S4 classes....suppose one going take quarter learn , good bioinformatics.  , ecologist, , think, way better spend quarter using use tidyverse well.)","code":""},{"path":"/reference/haplo_raster_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"make a raster plot of allelic types on haplotypes — haplo_raster_plot","title":"make a raster plot of allelic types on haplotypes — haplo_raster_plot","text":"pretty simple, standard operation, hassle hand code (especially getting lines show positions markers).","code":""},{"path":"/reference/haplo_raster_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make a raster plot of allelic types on haplotypes — haplo_raster_plot","text":"","code":"haplo_raster_plot(D, h_ord = NULL, pos_annot, fcolors,   highlight_pos = NULL, kinky_highlight_pos = NULL,   kinky_highlight_color = \"red\", yaxis_name = \"Haplotype\",   xaxis_name = \"SNP\", pos_bar_height = 0.1, pos_bar_text_size = 1,   lo_kink_frac = 0.2, hi_kink_frac = 0.2, tick_frac = 0.1,   expand_top = 0.1, expand_width = 0, kinky_line_size = 0.1,   het_outline_color = NA, het_outline_size = 1,   plot_read_depths = FALSE, annotation_columns = NULL,   annotation_rows = NULL, anno_row_start = 0,   snp_quant_tibble = NULL, sq_props = list(lo = -9, hi = -1),   no_legend = FALSE, no_y_labels = FALSE, no_x_labels = TRUE)"},{"path":"/reference/haplo_raster_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make a raster plot of allelic types on haplotypes — haplo_raster_plot","text":"D tibble column POS positions markers, column hnames names haplotypes, column atypes types plotted different colors. might also column maxGP holds genotype probability called allele. h_ord NULL (default) vecdtor giving order (top bottom plot) want come .  also filter data set include hnames h_ord.  NULL, order haplotypes data set used. pos_annot tibble two columns: pname pos give name label want genome position bar, position want . fcolors named vector passed values argument scale_fill_manual. Note including categories annotation_columns, include , , example: fcolors <- c(S = \"yellow\", F = \"blue\", spring = \"yellow\", fall = \"blue\", Sacto = \"red\", Klamath = \"green\") highlight_pos tibble column named \"POS\" SNP positions column named \"name\" holds name SNPs highlighted surrounding columns dotted line. kinky_highlight_pos just like highlight_pos, operates separately color kinky lines highlighted positions overlap columns. kinky_highlight_color default red. pos_bar_height fraction vertical plot area find position line plot area? tick_frac fraction pos_bar_height half tick mark height. expand_top fraction pos_bar_height expand top figure can capture text positions. expand_width fraction width plot expand can capture text positions. het_outline_color NA, color used outside cell denote whether heterozygous . plot_read_depths true, just plots heat map identical raster haplo shows read depths. annotation_columns tibble columns hnames, column, value, width, order.  can used show different characteristics negative x range. annotation_rows tibble columns POS, row, value, height, order.  can used show different characteristics negative y range. anno_row_start row main raster want annotation rows start? kink_frac fraction pos_bar_height marker lines kink.","code":""},{"path":"/reference/haplo_raster_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make a raster plot of allelic types on haplotypes — haplo_raster_plot","text":"","code":"data(RoSA) data(rosa_9) D <- RoSA %>%      dplyr::mutate(hnames = haplo_name,                    atypes = alle2)  # make a tibble to annotate pos_annot <- tibble::tibble(pos = seq(12.1e6, 12.35e6, by = 0.5e5)) %>%      dplyr::mutate(pname = sprintf(\"%.2f\", pos/1e06))  # it turns out that these guys are ordered in RoSA how we want them to come out h_ord <- unique(D$hnames)  # color the \"spring\" allele yellow and the other blue fcolors <- c(S = \"yellow\", F = \"blue\")  # get positions of SNPs to highlight h_pos = rosa_9 %>% dplyr::select(name, POS) %>%      dplyr::mutate(POS = as.integer(POS))  g <- haplo_raster_plot(D, h_ord, pos_annot, fcolors, h_pos) #> Error in geom_tile(data = D2, aes(x = POSfact, y = Hfact, fill = atypes,     colour = atypes)): could not find function \"geom_tile\"  # if you want to express genotype posteriors by transparency # you have to get those data from the unphased but imputed data U <- system.file(package = \"ecaRbioinf\", \"extdata\", \"greb1l-imputed-unphased.vcf.gz\") u <- vcfR::read.vcfR(U) #> Scanning file to determine attributes. #> File attributes: #>   meta lines: 10 #>   header_line: 11 #>   variant count: 5732 #>   column count: 137 #>  Meta line 10 read in. #> All meta lines processed. #> gt matrix initialized. #> Character matrix gt created. #>   Character matrix gt rows: 5732 #>   Character matrix gt cols: 137 #>   skip: 0 #>   nrows: 5732 #>   row_num: 0 #>  Processed variant 1000 Processed variant 2000 Processed variant 3000 Processed variant 4000 Processed variant 5000 Processed variant: 5732 #> All variants processed ut <- vcfR::vcfR2tidy(u)$gt %>%      tidyr::separate(gt_GP, into = c(\"gp0\", \"gp1\", \"gp2\"), sep = \",\", convert = TRUE) #> Extracting gt element GT #> Extracting gt element DS #> Extracting gt element GP utj <- ut %>%      dplyr::mutate(maxGP = pmax(gp0, gp1, gp2)) %>%      dplyr::select(POS, Indiv, maxGP)  D_GP <- D %>%      dplyr::left_join(utj, by = c(\"POS\", \"Indiv\"))"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/insert_variants_into_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"insert variants into sequences — insert_variants_into_sequences","title":"insert variants into sequences — insert_variants_into_sequences","text":"assumes fasta file available includes sequence want propagate variants .","code":""},{"path":"/reference/insert_variants_into_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"insert variants into sequences — insert_variants_into_sequences","text":"","code":"insert_variants_into_sequences(V, fasta, file = \"tmp.txt\", lo = NA,   hi = NA)"},{"path":"/reference/insert_variants_into_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"insert variants into sequences — insert_variants_into_sequences","text":"V tidy data frame like produced vcf_haplos2tidy() fasta path fasta file.  Currently single segment , already extracted part sequence want propagate variants . file can gzipped. name segment start position (relative start chromosome presumably used POS V) lo 1-based genomic coordinate start , desired. hi 1-based genomic coordinate end . Note lo hi must contained within fasta. variant_extent_overhang NULL full sequence fasta used.  Otherwise, make integer, case number base pairs min max V$POS included sequence.","code":""},{"path":"/reference/insert_variants_into_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"insert variants into sequences — insert_variants_into_sequences","text":"","code":"data(haps) V <- haps$tidy fasta <- system.file(\"extdata\", \"NC_037124.1_fragment_chinook.fna.gz\", package = \"ecaRbioinf\") lo <- 12260034 hi <- 12289484"},{"path":"/reference/marker_set_locations_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot genomic locations of different marker sets for comparison — marker_set_locations_plot","title":"Plot genomic locations of different marker sets for comparison — marker_set_locations_plot","text":"Pass thing tibble markers make plot marker names order given, lines genomic coordinate relative reference used. Assumes markers chromosome.","code":""},{"path":"/reference/marker_set_locations_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot genomic locations of different marker sets for comparison — marker_set_locations_plot","text":"","code":"marker_set_locations_plot(M, xlabel = \"position\", linehang = 0.07,   boxhang = -0.1, m_name_upnudge = 0.01, m_name_textsize = 3,   kink_rel = 0.08, conn_line_size = 0.3)"},{"path":"/reference/marker_set_locations_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot genomic locations of different marker sets for comparison — marker_set_locations_plot","text":"M tibble markers.  Must particular format: 1) First column numeric gives genomic coordinate variant/marker row. reference genome used determines x-coordinate plot. name column must \"position\". 2) second column must named pos_predicted logical vector says whether position marker first column predicted . , set FALSE. 3) successive column used store markers names particular marker set.  title column name marker set.  name marker marker set appear row appropriate location corresponding position coordinate column.  4) must columns tibble. 5) second column character vector chrom-name:position reference used.  6) order marker sets/coordinates columns 2 determines order placed going bottom top plot. 7) Note position markers may known reference coordinates, typically different assembly align reference assembly.  Nonetheless, order within rows markers reasonably well defined.  Put correct order leave position row NA.  Note \"outermost\" markers non-NA positions. xlabel desired label beneath x-axis.  Typically refer coordinate reference , , \"Position chr28 Otsh_v1.0\". left empty, default \"position\" linehang 2-vector (recycled shorter) gives overhang amount position line left leftmost markers (element 1) right rightmost marker, expressed proportion total distance leftmost rightmost marker. boxhang 2-vector giving fraction distance outermost markers want box edges left right.  Negative moves toward center positive moves . m_name_upnudge absolute amount nudge marker names upward within boxes. m_name_textsize size text marker names.  fiddled ** output size set, make marker names fit boxes. kink_rel height kinks (ticks position line) fraction total height marker boxes. conn_line_size size (thickness) lines/kinks/ticks connecting marker boxes positions.","code":""},{"path":"/reference/marker_set_locations_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot genomic locations of different marker sets for comparison — marker_set_locations_plot","text":"Function returns ggplot object.  change colors marker sets, add new discrete fill scale , shown examples. sure add na.value = \"transparent\"  set breaks reverse names columns 2 (see examples).","code":""},{"path":[]},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/separate_key_value_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"separate a column of multiple key=value pairs into separate columns headed by the keys — separate_key_value_pairs","title":"separate a column of multiple key=value pairs into separate columns headed by the keys — separate_key_value_pairs","text":"ugly problem different keys different rows.  going try easy--code solution super efficient, interesting see, nonetheless.","code":""},{"path":"/reference/separate_key_value_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"separate a column of multiple key=value pairs into separate columns headed by the keys — separate_key_value_pairs","text":"","code":"separate_key_value_pairs(D, column, key_regex = \"([a-zA-Z_0-9]+)=\",   val_regex = \"=([^;]*)\", remove = TRUE)"},{"path":"/reference/separate_key_value_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"separate a column of multiple key=value pairs into separate columns headed by the keys — separate_key_value_pairs","text":"D data frame column string-name column separate key_regex reg-ex pick keys.  Default =/; val_regex reg-ex pick vals. Default =/; remove TRUE column removed","code":""},{"path":"/reference/separate_key_value_pairs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"separate a column of multiple key=value pairs into separate columns headed by the keys — separate_key_value_pairs","text":"slow part actually just parsing things regexes.  Beyond pretty fast. Note currently convert columns different variable types afterward. user.","code":""},{"path":"/reference/separate_key_value_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"separate a column of multiple key=value pairs into separate columns headed by the keys — separate_key_value_pairs","text":"","code":"data(snp_anno_intersect) D <- snp_anno_intersect D2 <- separate_key_value_pairs(D, \"biggie\") #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. #> Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"/reference/snp_quant_ggplot_calls.html","id":null,"dir":"Reference","previous_headings":"","what":"this is a function to plot quantitative information about each SNP — snp_quant_ggplot_calls","title":"this is a function to plot quantitative information about each SNP — snp_quant_ggplot_calls","text":"bad boy plot background tile covers anything.  rimmed line \"rim_color\" filled \"background_color\" throws SNP-specific information height bar height \"value\" (tibble)","code":""},{"path":"/reference/snp_quant_ggplot_calls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"this is a function to plot quantitative information about each SNP — snp_quant_ggplot_calls","text":"","code":"snp_quant_ggplot_calls(Q, POS_levels, top, bottom,   background_color = \"white\", color = \"black\", rim_color = \"black\")"},{"path":"/reference/snp_quant_ggplot_calls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"this is a function to plot quantitative information about each SNP — snp_quant_ggplot_calls","text":"Q tibble POS value. POS_levels levels POSes current raster plot.  determine x position coerce POS factor. top row number top background (corresponds value = 1) bottom row number bottom background (corresponds value = 0) background_color string color desired background color string color desired value bar rim_color color line around box information","code":""},{"path":"/reference/snp_quant_ggplot_calls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"this is a function to plot quantitative information about each SNP — snp_quant_ggplot_calls","text":"thing returns vector ggplot calls can run eval, also tibble stuff .  (way lets us mix continuous discrete color scales....)","code":""},{"path":"/reference/tile_based_column_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"This function creates layers using geom_tile from *expanded* column_annotations — tile_based_column_annotations","title":"This function creates layers using geom_tile from *expanded* column_annotations — tile_based_column_annotations","text":"fill mapped continuous variable, still want annotations discrete values, .","code":""},{"path":"/reference/tile_based_column_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function creates layers using geom_tile from *expanded* column_annotations — tile_based_column_annotations","text":"","code":"tile_based_column_annotations(ace, h_ord, fcolors)"},{"path":"/reference/tile_based_column_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function creates layers using geom_tile from *expanded* column_annotations — tile_based_column_annotations","text":"ace expanded column annotations data frame.  must columns: hnames, column, value, x. h_ord hnames D supposed ordered fcolors named vector colors use discrete values","code":""},{"path":"/reference/tile_based_column_annotations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This function creates layers using geom_tile from *expanded* column_annotations — tile_based_column_annotations","text":"thing returns vector ggplot commands add layers","code":""},{"path":"/reference/tile_based_row_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"This function creates layers using geom_tile from *expanded* row_annotations — tile_based_row_annotations","title":"This function creates layers using geom_tile from *expanded* row_annotations — tile_based_row_annotations","text":"fill mapped continuous variable, still want annotations discrete values, .","code":""},{"path":"/reference/tile_based_row_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function creates layers using geom_tile from *expanded* row_annotations — tile_based_row_annotations","text":"","code":"tile_based_row_annotations(are, pos_values, fcolors)"},{"path":"/reference/tile_based_row_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function creates layers using geom_tile from *expanded* row_annotations — tile_based_row_annotations","text":"expanded row annotations data frame.  must columns: POS, row, value, y. pos_values levels POS values make factor fcolors named vector colors use discrete values","code":""},{"path":"/reference/tile_based_row_annotations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This function creates layers using geom_tile from *expanded* row_annotations — tile_based_row_annotations","text":"thing returns vector ggplot commands add layers assumes POS values just ones .","code":""},{"path":"/reference/vcf_haplos2tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"convert phased variants in VCF to tidy data frame of haplotypes — vcf_haplos2tidy","title":"convert phased variants in VCF to tidy data frame of haplotypes — vcf_haplos2tidy","text":"ancestral state listed gets put ","code":""},{"path":"/reference/vcf_haplos2tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert phased variants in VCF to tidy data frame of haplotypes — vcf_haplos2tidy","text":"","code":"vcf_haplos2tidy(V, Anc = NULL)"},{"path":"/reference/vcf_haplos2tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert phased variants in VCF to tidy data frame of haplotypes — vcf_haplos2tidy","text":"V path VCF.  Note allele separator \"|\" everything, phased. Anc NULL (default) ignored.  non-null, name given ancestral sequence.  used, requires VCF AA field within INFO field.","code":""},{"path":"/reference/vcf_haplos2tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert phased variants in VCF to tidy data frame of haplotypes — vcf_haplos2tidy","text":"list least two components: fix: fixed infor variants VCF, tidy tidy data frame columns: ChromKey, POS, Indiv, haplo (b), allele. Anc given sample -haplo tidy.  However Anc given, return list third component named avd, just like tidy, except includes extra column anc_vs_derived allele ancestral (.e. ancestral sequence), D derived (different ancestral sequence). (also, data frame include ancestral sequence Indiv.)","code":""},{"path":"/reference/vcf_haplos2tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert phased variants in VCF to tidy data frame of haplotypes — vcf_haplos2tidy","text":"","code":"V <- system.file(package = \"ecaRbioinf\", \"extdata\", \"greb1l-imp-phased-with-anc.vcf.gz\") haps <- vcf_haplos2tidy(V, Anc = \"Coho\") #> Scanning file to determine attributes. #> File attributes: #>   meta lines: 15 #>   header_line: 16 #>   variant count: 5732 #>   column count: 137 #>  Meta line 15 read in. #> All meta lines processed. #> gt matrix initialized. #> Character matrix gt created. #>   Character matrix gt rows: 5732 #>   Character matrix gt cols: 137 #>   skip: 0 #>   nrows: 5732 #>   row_num: 0 #>  Processed variant 1000 Processed variant 2000 Processed variant 3000 Processed variant 4000 Processed variant 5000 Processed variant: 5732 #> All variants processed #> Extracting gt element GT #> Extracting gt element DS #> Extracting gt element GP"}]

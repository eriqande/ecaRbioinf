% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marker-set-locations-plot.R
\name{marker_set_locations_plot}
\alias{marker_set_locations_plot}
\title{Plot genomic locations of different marker sets for comparison}
\usage{
marker_set_locations_plot(M, xlabel = "position", linehang = 0.07,
  boxhang = -0.1, m_name_upnudge = 0.01, m_name_textsize = 3,
  kink_rel = 0.08, conn_line_size = 0.3)
}
\arguments{
\item{M}{the tibble of markers.  Must be in a particular format: 1) First column
is numeric and gives the genomic coordinate of the variant/marker in each row.
The reference genome used determines the x-coordinate of the plot. The name of this
column must be "position". 2) the second column must be named pos_predicted and be a logical vector that
says whether the position of the marker in the first column is predicted or not.
If not, set them all to FALSE.
3) Each successive
column is used to store the markers names
in a particular marker set.  The title of the column should be the name of the marker
set.  The name of each marker in the marker set should appear in the row which is at the
appropriate location at the corresponding position in the coordinate column.  4) There must
be no other columns in the tibble.
5) The second column could be a character vector
that is the chrom-name:position for the reference used.  6) The order of the marker sets/coordinates
in columns 2 and up
determines the order in which they will be placed going from the bottom to the top of
the plot. 7) Note that the position of some markers may not be known on the
reference coordinates, typically because they are from a different assembly and they
do not align to the reference assembly.  Nonetheless, their order within the
rows of markers should be reasonably well defined.  Put them in in the correct order
and leave their position row as NA.  Note that the "outermost" markers should have
non-NA positions.}

\item{xlabel}{The desired label beneath the x-axis.  Typically will refer to what the
coordinate reference is, such as, "Position on chr28 from Otsh_v1.0". If left empty,
it will default to "position"}

\item{linehang}{a 2-vector (or recycled if shorter) that gives the overhang amount of the
position line to the left of the leftmost markers (element 1) and to the right of the rightmost
marker, expressed as a proportion of the total distance between leftmost and rightmost marker.}

\item{boxhang}{a 2-vector giving the fraction of the distance between outermost markers that
we want the box edges to be at on the left and right.  Negative moves them in toward the center
and positive moves them out.}

\item{m_name_upnudge}{absolute amount by which to nudge the marker names upward within their boxes.}

\item{m_name_textsize}{size of text for the marker names.  This should be fiddled with *after*
the output size has been set, to make the marker names fit in their boxes.}

\item{kink_rel}{the height of the kinks (and of the ticks on the position line) as a fraction
of the total height of all the marker boxes.}

\item{conn_line_size}{the size (thickness) of the lines/kinks/ticks connecting marker boxes to their positions.}
}
\description{
Pass this thing a tibble of markers and it will make a plot with
the marker names in the order they are given, with lines to
the genomic coordinate relative to the reference used. Assumes that all
markers are on the same chromosome.
}
\details{
Function returns a ggplot object.  To change colors of the marker sets,
add a new discrete fill scale to it, as shown in the examples. Be sure to
add \code{na.value = "transparent"}  and set breaks to be the reverse of the
names of columns 2 and up (see examples).
}
\examples{
# mykiss markers plot
# none of these positions are predicted, but this is for testing.
M <- readr::read_csv("inst/extdata/mykiss-greb1l-snp-summary.csv") \%>\%
       mutate(pos_predicted = rep(c(FALSE, FALSE, TRUE, FALSE), length.out = dplyr::n())) \%>\%
       select(position, pos_predicted, everything())

g1 <- marker_set_locations_plot(M)
g2 <- marker_set_locations_plot(M) +
  scale_fill_brewer(
    palette = "Set2",
    na.value = "transparent",
    breaks = rev(names(M)[-(1:2)])
   )

# for a final figure, choose your output size and format
# and work from that to set the m_name_textsize
\\notrun{
g3 <- marker_set_locations_plot(M,
        m_name_upnudge = 0.007,
        m_name_textsize = 3.0
) +
  scale_fill_brewer(
    palette = "Set2",
    na.value = "transparent",
    breaks = rev(names(M)[-1])
   )
 ggsave(g3,
 filename = "msl-plot.pdf",
 width = 8, height = 10
 )
}
}
